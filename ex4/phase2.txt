0x000000000040104f <+0>:	push   %rbp 
   0x0000000000401050 <+1>:	push   %rbx
   0x0000000000401051 <+2>:	sub    $0x28,%rsp
   0x0000000000401055 <+6>:	mov    %rsp,%rsi
   0x0000000000401058 <+9>:	callq  0x401425 <read_six_numbers>
   0x000000000040105d <+14>:	cmpl   $0x0,(%rsp)  
   0x0000000000401061 <+18>:	jns    0x401068 <phase_2+25> //(rsp)>0 ->continue, else explode
   0x0000000000401063 <+20>:	callq  0x4013ef <explode_bomb>
   0x0000000000401068 <+25>:	lea    0x4(%rsp),%rbx //rbx=rsp+4 second arg
   0x000000000040106d <+30>:	mov    $0x1,%ebp    //ebp=1 
   0x0000000000401072 <+35>:	mov    %ebp,%eax    //eax=1
   0x0000000000401074 <+37>:	add    -0x4(%rbx),%eax // eax+=rbx-4 (=rsp+=first arg)
   0x0000000000401077 <+40>:	cmp    %eax,(%rbx) //an-1 +n-1==an
   0x0000000000401079 <+42>:	je     0x401080 <phase_2+49>
   0x000000000040107b <+44>:	callq  0x4013ef <explode_bomb>
   0x0000000000401080 <+49>:	add    $0x1,%ebp    //ebp=2
   0x0000000000401083 <+52>:	add    $0x4,%rbx //third arg
   0x0000000000401087 <+56>:	cmp    $0x6,%ebp    //if ebp=6
   0x000000000040108a <+59>:	jne    0x401072 <phase_2+35>
   0x000000000040108c <+61>:	add    $0x28,%rsp
   0x0000000000401090 <+65>:	pop    %rbx
   0x0000000000401091 <+66>:	pop    %rbp

an=a n-1 + n-1
1 2 4 7 11 16
